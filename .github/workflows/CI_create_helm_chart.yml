name: "[CI] Create helm chart"
on:
  push:
    tags:
      - "v*.*"
  workflow_dispatch:
    inputs:
      tag:
        description: '`vx.y.z-릴리즈` 형태로 버전을 입력해주세요. `vx.y.z`도 가능합니다.'
        required: true
        default: v1.6.4-rc3

  repository_dispatch:
    types: [branch_tagging]

jobs:
  
  condition_check:
    runs-on: ubuntu-latest
    outputs:
      NOT_FIRST_TAG: ${{ steps.job1.outputs.not_first_tag }}
      BRANCH: ${{ steps.set_env.outputs.BRANCH }}
      TAG: ${{ steps.set_env.outputs.TAG }}
    steps:
      - name: set TAG env
        id: set_env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]
            then
              echo "TAG=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
              echo "::set-output name=TAG::${{ github.event.inputs.tag }}"
              echo "BRANCH=$(echo ${{ github.event.inputs.tag }} | cut -c 2-6 | awk '{print "release-"$1}')" >> $GITHUB_ENV
              echo "::set-output name=BRANCH::$(echo ${{ github.event.inputs.tag }} | cut -c 2-6 | awk '{print "release-"$1}')"
          elif [[ "${{ github.event_name }}" == "push" ]]
            then
              echo "TAG=$(echo ${{ github.ref }} | cut -c 11-)" >> $GITHUB_ENV
              echo "::set-output name=TAG::$(echo ${{ github.ref }} | cut -c 11-)"
              echo "BRANCH=$(echo ${{ github.ref }} | cut -c 12-16 | awk '{print "release-"$1}')" >> $GITHUB_ENV
              echo "::set-output name=BRANCH::$(echo ${{ github.ref }} | cut -c 12-16 | awk '{print "release-"$1}')"
            else
              echo "TAG=$(echo ${{ github.event.client_payload.version }})" >> $GITHUB_ENV
              echo "::set-output name=TAG::$(echo ${{ github.event.client_payload.version }})"
              echo "BRANCH=$(echo ${{ github.event.client_payload.version }} | cut -c 2-6 | awk '{print "release-"$1}')" >> $GITHUB_ENV
              echo "::set-output name=BRANCH::$(echo ${{ github.event.client_payload.version }} | cut -c 2-6 | awk '{print "release-"$1}')"
          fi
      - uses: actions/checkout@v2
        with:
          ref: ${{env.BRANCH}}
      - name: totally same version, redeploy dockerhub
        id: job1
        run: |
          if [ "$(cat src/VERSION)" == "${{ env.TAG }}" ]
            then echo "::set-output name=not_first_tag::true"
            else echo "::set-output name=not_first_tag::false"
          fi

  update_master_branch_version_file:
    needs: condition_check
    runs-on: ubuntu-latest
    env:
      TAG: ${{ needs.condition_check.outputs.TAG }}
    if: needs.condition_check.outputs.NOT_FIRST_TAG == 'false'
    steps:
      - name: update master version
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.PAT_TOKEN }}
          event-type: update_master_version
          client-payload: '{"version": "${{ env.TAG }}"}'

  update_local_version_file:
    needs: condition_check
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.condition_check.outputs.TAG }}
      BRANCH: ${{ needs.condition_check.outputs.BRANCH }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ env.BRANCH }}
      - name: git config
        if: needs.condition_check.outputs.NOT_FIRST_TAG == 'false'
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          echo ${{ env.VERSION }} > src/VERSION
          git add .
          git commit -m "[CI/CD] release version ${{ env.VERSION }}"
      - name: task
        if: needs.condition_check.outputs.NOT_FIRST_TAG == 'false' && (github.event_name == 'workflow_dispatch' || github.event_name == 'repository_dispatch')
        run: |
          git tag ${{ env.VERSION }} 
          git push --atomic origin ${{ env.BRANCH }} ${{ env.VERSION }}
      - name: task
        if: needs.condition_check.outputs.NOT_FIRST_TAG == 'false' && (github.event_name == 'push')
        run: |
          \git tag -f ${{ env.VERSION }} 
          git push && \git push -f origin "${{ env.VERSION }}"

  helm:
    if: github.repository_owner == 'spaceone-dev' && needs.condition_check.outputs.NOT_FIRST_TAG == 'false'
    needs: [condition_check, update_local_version_file]
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.condition_check.outputs.TAG }}
      BRANCH: ${{ needs.condition_check.outputs.BRANCH }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ env.BRANCH }}
      - name: set version
        run: |
          echo ${{ env.VERSION }} | cut -c 2- > src/VERSION
      - name: Install Helm
        uses: azure/setup-helm@v1
        with:
          version: '3.4.0'
      - name: Run chart-releaser
        run: |
          export cache_dir=/tmp/helm
          mkdir -p "$cache_dir"
          echo "Installing chart-releaser..."
          curl -sSLo cr.tar.gz "https://github.com/helm/chart-releaser/releases/download/v1.2.0/chart-releaser_1.2.0_linux_amd64.tar.gz"
          tar -xzf cr.tar.gz -C "$cache_dir"
          rm -f cr.tar.gz

          echo 'Adding cr directory to PATH...'
          export PATH="$cache_dir:$PATH"

          rm -rf .deploy

          echo 'Print Version ...'
          export SERVICE=$(echo ${{ github.repository }} | cut -d '/' -f2)
          export VERSION=${{ env.VERSION }}
          export VERSION_NUM=$(echo ${VERSION#v})
          echo 'Update helm version in chart.yaml and values.yaml'
          echo "SERVICE=${SERVICE}" >> $GITHUB_ENV
          echo "ORGANIZATION=${SERVICE}.image.repository" >> $GITHUB_ENV
          echo "VERSION_PATH=${SERVICE}.image.version" >> $GITHUB_ENV
          echo "VERSION_NUM=${VERSION_NUM}" >> $GITHUB_ENV

          sed -i "s/latest/${VERSION_NUM}/g" deploy/helm/values.yaml
          helm package deploy/helm --app-version ${VERSION_NUM} --version ${VERSION_NUM} --destination .deploy
          cr upload -o spaceone-dev -r charts -p .deploy --token ${{ secrets.SPACEONE_ADMIN_TOKEN }}

          git config --global user.email admin@spaceone.dev
          git config --global user.name admin-spaceone
          eval "$(ssh-agent -s)"
          cat <<EOF>id_rsa
          ${{secrets.ssh_key}}
          EOF
          chmod 400 ./id_rsa && ssh-add ./id_rsa
          git clone git@github.com:spaceone-dev/charts.git
          cd charts
          git checkout gh-pages || true
          rm -f *.tgz
          cp ../.deploy/* ./
          ls
          cr index -i ./index.yaml -p ./ -o spaceone-dev -r charts -c https://spaceone-dev.github.io/charts --token ${{ secrets.SPACEONE_ADMIN_TOKEN }}
          git add index.yaml
          git commit -m "Add helm chart ${SERVICE} - ${VERSION}"
          git push origin gh-pages


      - name: Check out spaceone repo
        uses: actions/checkout@master
        with:
          repository: spaceone-dev/deploy-test
          token: ${{ secrets.SPACEONE_ADMIN_TOKEN }}

      - name: Update tag in version.yaml
        uses: fjogeleit/yaml-update-action@master
        with:
          valueFile: 'deploy/helm/config/version.yaml'
          propertyPath: ${{ env.VERSION_PATH }}
          value: ${{ env.VERSION_NUM }}
          repository: spaceone-dev/deploy-test
          message: 'Update ${{ env.SERVICE }} to ${{ env.VERSION_NUM }}'
          token: ${{ secrets.SPACEONE_ADMIN_TOKEN }}

      - name: Update org in version.yaml
        uses: fjogeleit/yaml-update-action@master
        with:
          valueFile: 'deploy/helm/config/version.yaml'
          propertyPath: ${{ env.ORGANIZATION }}
          value: spaceone
          repository: spaceone-dev/deploy-test
          message: 'Update ${{ env.SERVICE }} organization to spaceone'
          token: ${{ secrets.SPACEONE_ADMIN_TOKEN }}


